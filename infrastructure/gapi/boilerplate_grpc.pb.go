// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: boilerplate.proto

package gapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BoilerplateService_CreateBoilerplate_FullMethodName  = "/boilerplate.BoilerplateService/CreateBoilerplate"
	BoilerplateService_GetBoilerplate_FullMethodName     = "/boilerplate.BoilerplateService/GetBoilerplate"
	BoilerplateService_UpdateBoilerplate_FullMethodName  = "/boilerplate.BoilerplateService/UpdateBoilerplate"
	BoilerplateService_DeleteBoilerplate_FullMethodName  = "/boilerplate.BoilerplateService/DeleteBoilerplate"
	BoilerplateService_ListBoilerplates_FullMethodName   = "/boilerplate.BoilerplateService/ListBoilerplates"
	BoilerplateService_SearchBoilerplates_FullMethodName = "/boilerplate.BoilerplateService/SearchBoilerplates"
)

// BoilerplateServiceClient is the client API for BoilerplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoilerplateServiceClient interface {
	CreateBoilerplate(ctx context.Context, in *CreateBoilerplateRequest, opts ...grpc.CallOption) (*CreateBoilerplateResponse, error)
	GetBoilerplate(ctx context.Context, in *GetBoilerplateRequest, opts ...grpc.CallOption) (*GetBoilerplateResponse, error)
	UpdateBoilerplate(ctx context.Context, in *UpdateBoilerplateRequest, opts ...grpc.CallOption) (*UpdateBoilerplateResponse, error)
	DeleteBoilerplate(ctx context.Context, in *DeleteBoilerplateRequest, opts ...grpc.CallOption) (*DeleteBoilerplateResponse, error)
	ListBoilerplates(ctx context.Context, in *ListBoilerplatesRequest, opts ...grpc.CallOption) (*ListBoilerplatesResponse, error)
	SearchBoilerplates(ctx context.Context, in *SearchBoilerplatesRequest, opts ...grpc.CallOption) (*SearchBoilerplatesResponse, error)
}

type boilerplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoilerplateServiceClient(cc grpc.ClientConnInterface) BoilerplateServiceClient {
	return &boilerplateServiceClient{cc}
}

func (c *boilerplateServiceClient) CreateBoilerplate(ctx context.Context, in *CreateBoilerplateRequest, opts ...grpc.CallOption) (*CreateBoilerplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBoilerplateResponse)
	err := c.cc.Invoke(ctx, BoilerplateService_CreateBoilerplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateServiceClient) GetBoilerplate(ctx context.Context, in *GetBoilerplateRequest, opts ...grpc.CallOption) (*GetBoilerplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBoilerplateResponse)
	err := c.cc.Invoke(ctx, BoilerplateService_GetBoilerplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateServiceClient) UpdateBoilerplate(ctx context.Context, in *UpdateBoilerplateRequest, opts ...grpc.CallOption) (*UpdateBoilerplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBoilerplateResponse)
	err := c.cc.Invoke(ctx, BoilerplateService_UpdateBoilerplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateServiceClient) DeleteBoilerplate(ctx context.Context, in *DeleteBoilerplateRequest, opts ...grpc.CallOption) (*DeleteBoilerplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBoilerplateResponse)
	err := c.cc.Invoke(ctx, BoilerplateService_DeleteBoilerplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateServiceClient) ListBoilerplates(ctx context.Context, in *ListBoilerplatesRequest, opts ...grpc.CallOption) (*ListBoilerplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBoilerplatesResponse)
	err := c.cc.Invoke(ctx, BoilerplateService_ListBoilerplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateServiceClient) SearchBoilerplates(ctx context.Context, in *SearchBoilerplatesRequest, opts ...grpc.CallOption) (*SearchBoilerplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBoilerplatesResponse)
	err := c.cc.Invoke(ctx, BoilerplateService_SearchBoilerplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoilerplateServiceServer is the server API for BoilerplateService service.
// All implementations must embed UnimplementedBoilerplateServiceServer
// for forward compatibility.
type BoilerplateServiceServer interface {
	CreateBoilerplate(context.Context, *CreateBoilerplateRequest) (*CreateBoilerplateResponse, error)
	GetBoilerplate(context.Context, *GetBoilerplateRequest) (*GetBoilerplateResponse, error)
	UpdateBoilerplate(context.Context, *UpdateBoilerplateRequest) (*UpdateBoilerplateResponse, error)
	DeleteBoilerplate(context.Context, *DeleteBoilerplateRequest) (*DeleteBoilerplateResponse, error)
	ListBoilerplates(context.Context, *ListBoilerplatesRequest) (*ListBoilerplatesResponse, error)
	SearchBoilerplates(context.Context, *SearchBoilerplatesRequest) (*SearchBoilerplatesResponse, error)
	mustEmbedUnimplementedBoilerplateServiceServer()
}

// UnimplementedBoilerplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBoilerplateServiceServer struct{}

func (UnimplementedBoilerplateServiceServer) CreateBoilerplate(context.Context, *CreateBoilerplateRequest) (*CreateBoilerplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoilerplate not implemented")
}
func (UnimplementedBoilerplateServiceServer) GetBoilerplate(context.Context, *GetBoilerplateRequest) (*GetBoilerplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoilerplate not implemented")
}
func (UnimplementedBoilerplateServiceServer) UpdateBoilerplate(context.Context, *UpdateBoilerplateRequest) (*UpdateBoilerplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoilerplate not implemented")
}
func (UnimplementedBoilerplateServiceServer) DeleteBoilerplate(context.Context, *DeleteBoilerplateRequest) (*DeleteBoilerplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoilerplate not implemented")
}
func (UnimplementedBoilerplateServiceServer) ListBoilerplates(context.Context, *ListBoilerplatesRequest) (*ListBoilerplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoilerplates not implemented")
}
func (UnimplementedBoilerplateServiceServer) SearchBoilerplates(context.Context, *SearchBoilerplatesRequest) (*SearchBoilerplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBoilerplates not implemented")
}
func (UnimplementedBoilerplateServiceServer) mustEmbedUnimplementedBoilerplateServiceServer() {}
func (UnimplementedBoilerplateServiceServer) testEmbeddedByValue()                            {}

// UnsafeBoilerplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoilerplateServiceServer will
// result in compilation errors.
type UnsafeBoilerplateServiceServer interface {
	mustEmbedUnimplementedBoilerplateServiceServer()
}

func RegisterBoilerplateServiceServer(s grpc.ServiceRegistrar, srv BoilerplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedBoilerplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BoilerplateService_ServiceDesc, srv)
}

func _BoilerplateService_CreateBoilerplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoilerplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServiceServer).CreateBoilerplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoilerplateService_CreateBoilerplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServiceServer).CreateBoilerplate(ctx, req.(*CreateBoilerplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoilerplateService_GetBoilerplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoilerplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServiceServer).GetBoilerplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoilerplateService_GetBoilerplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServiceServer).GetBoilerplate(ctx, req.(*GetBoilerplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoilerplateService_UpdateBoilerplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoilerplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServiceServer).UpdateBoilerplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoilerplateService_UpdateBoilerplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServiceServer).UpdateBoilerplate(ctx, req.(*UpdateBoilerplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoilerplateService_DeleteBoilerplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoilerplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServiceServer).DeleteBoilerplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoilerplateService_DeleteBoilerplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServiceServer).DeleteBoilerplate(ctx, req.(*DeleteBoilerplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoilerplateService_ListBoilerplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBoilerplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServiceServer).ListBoilerplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoilerplateService_ListBoilerplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServiceServer).ListBoilerplates(ctx, req.(*ListBoilerplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoilerplateService_SearchBoilerplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBoilerplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServiceServer).SearchBoilerplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoilerplateService_SearchBoilerplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServiceServer).SearchBoilerplates(ctx, req.(*SearchBoilerplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoilerplateService_ServiceDesc is the grpc.ServiceDesc for BoilerplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoilerplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boilerplate.BoilerplateService",
	HandlerType: (*BoilerplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBoilerplate",
			Handler:    _BoilerplateService_CreateBoilerplate_Handler,
		},
		{
			MethodName: "GetBoilerplate",
			Handler:    _BoilerplateService_GetBoilerplate_Handler,
		},
		{
			MethodName: "UpdateBoilerplate",
			Handler:    _BoilerplateService_UpdateBoilerplate_Handler,
		},
		{
			MethodName: "DeleteBoilerplate",
			Handler:    _BoilerplateService_DeleteBoilerplate_Handler,
		},
		{
			MethodName: "ListBoilerplates",
			Handler:    _BoilerplateService_ListBoilerplates_Handler,
		},
		{
			MethodName: "SearchBoilerplates",
			Handler:    _BoilerplateService_SearchBoilerplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boilerplate.proto",
}
